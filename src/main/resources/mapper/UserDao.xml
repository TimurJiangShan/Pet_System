<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.dao.UserDao">
	<!-- Provide sql statement configuration for dao interface method -->
	<resultMap id="BaseResultMap" type="com.example.entity.User">
        <id column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="score" jdbcType="INTEGER" property="score"/>
        <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="url" jdbcType="VARCHAR" property="url"/>
        <result column="signature" jdbcType="VARCHAR" property="signature"/>
        <result column="receive_msg" jdbcType="BIT" property="receiveMsg"/>
        <result column="create_date" jdbcType="TIMESTAMP" property="createDate"/>
        <result column="update_date" jdbcType="TIMESTAMP" property="updateDate"/>
        <result column="user_addr" jdbcType="VARCHAR" property="userAddr"/>
        <result column="third_id" jdbcType="VARCHAR" property="thirdId"/>
        <result column="third_access_token" jdbcType="VARCHAR" property="thirdAccessToken"/>
    </resultMap>
    <sql id="Base_Column_List">
        user_id, user_name, password, user_sex, score, avatar, email, url, signature, receive_msg,
        create_date, update_date,user_addr,third_id,third_access_token,user_type,is_block
    </sql>

	<select id="selectAll" resultType="User">
		SELECT
        <include refid="Base_Column_List"/>
		FROM
			user
		ORDER BY
			create_date
		<if test="start != null">
            limit #{start,jdbcType=INTEGER}
            <if test="limit != null">
                ,#{limit,jdbcType=INTEGER}
            </if>
        </if>
	</select>

	<select id="selectByScore" resultType="Top100">
		SELECT
		 a.user_name,
		 a.score,
		 a.avatar,
		 (SELECT COUNT(1) from topic b where a.user_name = b.author) count_topic,
		 (SELECT COUNT(1) from reply c where a.user_id = c.reply_author_id) count_reply
		FROM
			user a
		ORDER BY
			a.score desc,a.create_date desc
		<if test="limit != null">
            limit #{limit,jdbcType=INTEGER}
        </if>
	</select>
	<update id="updateScore">
		update user
		set score = score+#{score}
		where user_id = #{userId}
	</update>
	<update id="updateScoreByName">
		update user
		set score = score+#{score}
		where user_name = #{userName}
	</update>

	<select id="selectByUserId" resultType="User" parameterType="java.lang.Integer">
		SELECT
		<include refid="Base_Column_List"/>
		FROM
			user
		WHERE
			user_id = #{userId}
	</select>

	<select id="selectByUserName" resultType="User" parameterType="java.lang.String">
		SELECT
		<include refid="Base_Column_List"/>
		FROM
			user
		WHERE
			user_name = #{userName}
	</select>

	<select id="selectByEmail" resultType="User" parameterType="java.lang.String">
		SELECT
		<include refid="Base_Column_List"/>
		FROM
			user
		WHERE
			email = #{email}
	</select>

	<select id="selectByUserNameAndPassword" resultType="User" parameterType="java.lang.String">
		SELECT
		<include refid="Base_Column_List"/>
		FROM
			user
		WHERE
			user_name = #{userName}
		AND
		    password = #{password}
	</select>

	<select id="selectByEmailAndPassword" resultType="User" parameterType="java.lang.String">
		SELECT
		<include refid="Base_Column_List"/>
		FROM
			user
		WHERE
			email = #{email}
		AND
		    password = #{password}
	</select>

	<select id="countUserAll" resultType="java.lang.Integer">
		SELECT 
		COUNT(*)
		FROM
		user
	</select>

	<insert id="insertUser" parameterType="com.example.entity.User" keyProperty="userId" useGeneratedKeys="true">
		INSERT INTO user
		(user_id,
		user_name,
		password,
		user_sex,
		user_addr,
		score,
		avatar,
		email,
		url,
		signature,
		third_id,
		receive_msg,
		create_date,
		update_date,
		is_block,
		third_access_token,
		status_cd,
		login_ip,
		last_login_ip,
		user_type)
		values
		(#{userId},
		#{userName},
		#{password},
		#{userSex},
		#{userAddr},
		#{score},
		#{avatar},
		#{email},
		#{url},
		#{signature},
		#{thirdId},
		#{receiveMsg},
		#{createDate},
		#{updateDate},
		#{isBlock},
		#{thirdAccessToken},
		#{statusCd},
		#{loginIp},
		#{lastLoginIp},
		#{userType})
	</insert>

	<insert id="insertByUserNameAndPassword">

		INSERT ignore INTO user (user_name, password)
		VALUES (#{userName}, #{password})
	</insert>

	<insert id="insertByUserNameAndPasswordAndEmail">

		INSERT ignore INTO user (user_name, password,email)
		VALUES (#{userName}, #{password},#{email})
	</insert>

	<update id="updateUser" parameterType="com.example.entity.User">
        UPDATE 
        	user
        SET	
        	user_name = #{userName},
        	password = #{password},
        	user_sex = #{userSex},
        	user_addr = #{userAddr},
        	score = #{score},
        	avatar = #{avatar},
        	email = #{email},
        	url = #{url},
        	signature = #{signature},
        	third_id = #{thirdId},
        	receive_msg = #{receiveMsg},
        	create_date = #{createDate},
        	update_date = #{updateDate},
        	is_block = #{isBlock},
        	third_access_token = #{thirdAccessToken},
        	status_cd = #{statusCd},
        	login_ip = #{loginIp},
        	last_login_ip = #{lastLoginIp},
        	user_type = #{userType},
        	remark = #{remark}
        WHERE 
        	user_id = #{userId}
    </update>

	<update id="updateUserByUserName">
        update user
        set user_name = #{newUserName},
        email = #{email},
        url = #{url},
        signature = #{signature},
        receive_msg = #{receiveMsg}
        where user_name = #{userName}
    </update>

	<update id="updateAvatarByUserId">
        update user
        set user_name = #{newUserName},
        email = #{email},
        url = #{url},
        signature = #{signature},
        receive_msg = #{receiveMsg}
        where user_id = #{userId}
    </update>

	<update id="updateAvatarByUserName">
        update user
        set avatar = #{avatar}
        where user_name = #{userName}
    </update>

	<update id="updatePasswordByUserId">
        update tb_user
        set password = #{password}
        where user_id = #{userId}
    </update>

	<update id="updatePasswordByUserName">
        update tb_user
        set password = #{password}
        where user_name = #{userName}
    </update>

	<delete id="deleteUserByUserId" parameterType="java.lang.Integer">
		DELETE 
			FROM user
		WHERE
			user_id = #{userId}
	</delete>

	<delete id="deleteUserByUserName" parameterType="java.lang.String">
		DELETE 
			FROM user
		WHERE
			user_name = #{userName}
	</delete>

	<select id="countScore" resultType="java.lang.Integer">
		SELECT 
			score
		FROM
			user
		WHERE
			user_id = #{userId}
	</select>
	

	<select id="countToday" resultType="java.lang.Integer">
        select count(1)
        from user a
        where TO_DAYS(a.create_date) = TO_DAYS(NOW())
    </select>
    

    <select id="selectAllForAdmin" resultType="User">
		SELECT
        	*
		FROM
			user
		WHERE 
			1 = 1
		<if test="username != null">
		AND user_name like CONCAT('%',#{username},'%')
		</if>
		<if test="email != null">
		AND email like CONCAT('%',#{email},'%')
		</if>
		ORDER BY create_date desc
		<if test="start != null">
            limit #{start,jdbcType=INTEGER}
            <if test="limit != null">
                ,#{limit,jdbcType=INTEGER}
            </if>
        </if>
     </select>
     

     <select id="countAllForAdmin" resultType="java.lang.Integer">
        SELECT
        	COUNT(1)
        FROM
        	user
        WHERE 
			1 = 1
		<if test='username != null'>
			AND user_name like CONCAT('%',#{username},'%')
		</if>
		<if test='email != null'>
			AND email like CONCAT('%',#{email},'%')
		</if>
    </select>

    <select id="findAllEmail" resultType="java.lang.String">
		SELECT email FROM user
	</select>
</mapper>